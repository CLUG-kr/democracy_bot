name: scientific
version: 0.3.4.2
id: scientific-0.3.4.2-bdc94750c0a178ae4fc2661a81eeb44e
license: BSD3
copyright:
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
stability:
homepage: https://github.com/basvandijk/scientific
package-url:
synopsis: Numbers represented using scientific notation
description: @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
             arbitrary precision and space efficient. They are represented using
             <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
             The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
             @e :: 'Int'@. A scientific number corresponds to the
             'Fractional' number: @'fromInteger' c * 10 '^^' e@.
             .
             Note that since we're using an 'Int' to represent the exponent these numbers
             aren't truly arbitrary precision. I intend to change the type of the exponent
             to 'Integer' in a future release.
             .
             The main application of 'Scientific' is to be used as the target of parsing
             arbitrary precision numbers coming from an untrusted source. The advantages
             over using 'Rational' for this are that:
             .
             * A 'Scientific' is more efficient to construct. Rational numbers need to be
             constructed using '%' which has to compute the 'gcd' of the 'numerator' and
             'denominator'.
             .
             * 'Scientific' is safe against numbers with huge exponents. For example:
             @1e1000000000 :: 'Rational'@ will fill up all space and crash your
             program. Scientific works as expected:
             .
             > > read "1e1000000000" :: Scientific
             > 1.0e1000000000
             .
             * Also, the space usage of converting scientific numbers with huge exponents to
             @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
             will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules: Data.Scientific Data.Text.Lazy.Builder.Scientific
                 Data.ByteString.Builder.Scientific
hidden-modules: Math.NumberTheory.Logarithms
                GHC.Integer.Logarithms.Compat Utils
trusted: False
import-dirs: /home/codeonwort/haskell/projects/democracybot/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.4/scientific-0.3.4.2
library-dirs: /home/codeonwort/haskell/projects/democracybot/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.4/scientific-0.3.4.2
hs-libraries: HSscientific-0.3.4.2
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: base-4.7.0.2-5ef1e7e809bc3b18d74efc783356e209
         binary-0.7.1.0-bba5dab39be95c7616857ae91705c688
         bytestring-0.10.4.0-26103aa8e3e8b36b6536643335cb90d4
         containers-0.5.5.1-455e739168713e10e04ca8e62eea1cd7
         deepseq-1.3.0.2-93178b8e6ba7ddd1795f8a385993b3ec
         ghc-prim-0.3.1.0-ec14d2f6075975a2ce9112eae431c8e1
         hashable-1.2.3.3-cc47b4bb64d8e1bff77bdac5fc35a6cd
         integer-gmp-0.5.1.0-de4898ebdc5ab81cedce89121ae9ac84
         text-1.2.1.3-418cb75f32422b9a536a672bbb7bba64
         vector-0.11.0.0-a671df4b89d437fac9edda004dacfd03
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/codeonwort/haskell/projects/democracybot/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.4/scientific-0.3.4.2/html/scientific.haddock
haddock-html: /home/codeonwort/haskell/projects/democracybot/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.4/scientific-0.3.4.2/html
